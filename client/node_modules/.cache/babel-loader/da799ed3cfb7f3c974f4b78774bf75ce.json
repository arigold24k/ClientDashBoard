{"ast":null,"code":"var _regeneratorRuntime = require(\"C:\\\\Users\\\\avidal\\\\Documents\\\\WebApps\\\\clientDashboard\\\\ClientDashBoard\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\avidal\\\\Documents\\\\WebApps\\\\clientDashboard\\\\ClientDashBoard\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar UTILITIES = require('./utiltities');\n/* eslint-disable */\n\n\nvar BARCODE_DECODERS = {\n  'code-128': require('./code-128'),\n  'code-2of5': require('./2of5'),\n  'code-39': require('./code-39'),\n  'code-93': require('./code-93'),\n  'ean-13': require('./ean-13'),\n  'ean-8': require('./ean-8'),\n  codabar: require('./codabar')\n  /* eslint-enable */\n\n  /**\r\n   * Scans and returns barcode from the provided image\r\n   *\r\n   * @param {*} image Image element || Canvas || ImageData || Image Path in Node.js\r\n   * @param {Object} options Options defining type of barcode to detect\r\n   * @param {String} options.barcode Barcode name\r\n   * @param {String=} options.type Type of Barcode\r\n   * @returns {String} Extracted barcode string\r\n   */\n\n};\n\nfunction barcodeDecoder(_x, _x2) {\n  return _barcodeDecoder.apply(this, arguments);\n}\n\nfunction _barcodeDecoder() {\n  _barcodeDecoder = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(image, options) {\n    var list, _ref, data, width, height, channels, spoints, numLines, slineStep, start, end, pxLine, sum, min, max, padding, row, col, i, g, s, _i, _s, pivot, bmp, _col, matches, value, _row, curr, count, lines, _col2, result;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options.barcode = options.barcode.toLowerCase();\n            list = Object.keys(BARCODE_DECODERS);\n\n            if (!(list.indexOf(options.barcode) === -1)) {\n              _context.next = 4;\n              break;\n            }\n\n            throw new Error(\"Invalid barcode specified. Available decoders: \".concat(list, \". https://github.com/mubaidr/Javascript-Barcode-Reader#available-decoders\"));\n\n          case 4:\n            _context.next = 6;\n            return UTILITIES.getImageDataFromSource(image);\n\n          case 6:\n            _ref = _context.sent;\n            data = _ref.data;\n            width = _ref.width;\n            height = _ref.height;\n            channels = data.length / (width * height); // check points for barcode location\n\n            spoints = [1, 9, 2, 8, 3, 7, 4, 6, 5];\n            numLines = spoints.length;\n            slineStep = height / (numLines + 1); // eslint-disable-next-line\n\n          case 14:\n            if (!(numLines -= 1)) {\n              _context.next = 38;\n              break;\n            }\n\n            // create section of height 2\n            start = channels * width * Math.floor(slineStep * spoints[numLines]);\n            end = channels * width * Math.floor(slineStep * spoints[numLines]) + 2 * channels * width;\n            pxLine = data.slice(start, end);\n            sum = [];\n            min = 0;\n            max = 0;\n            padding = {\n              left: true,\n              right: true // grey scale section and sum of columns pixels in section\n\n            };\n\n            for (row = 0; row < 2; row += 1) {\n              for (col = 0; col < width; col += 1) {\n                i = (row * width + col) * channels;\n                g = (pxLine[i] * 3 + pxLine[i + 1] * 4 + pxLine[i + 2] * 2) / 9;\n                s = sum[col];\n                pxLine[i] = g;\n                pxLine[i + 1] = g;\n                pxLine[i + 2] = g;\n                sum[col] = g + (s || 0);\n              }\n            }\n\n            for (_i = 0; _i < width; _i += 1) {\n              sum[_i] /= 2;\n              _s = sum[_i];\n\n              if (_s < min) {\n                min = _s;\n              } else {\n                max = _s;\n              }\n            } // matches columns in two rows\n\n\n            pivot = min + (max - min) / 2;\n            bmp = [];\n\n            for (_col = 0; _col < width; _col += 1) {\n              matches = 0;\n              value = void 0;\n\n              for (_row = 0; _row < 2; _row += 1) {\n                value = pxLine[(_row * width + _col) * channels];\n\n                if (value > pivot) {\n                  matches += 1;\n                }\n              }\n\n              if (_col === 0 && value <= pivot) padding.left = false;\n\n              if (_col === width - 1 && value <= pivot) {\n                padding.right = false;\n              }\n\n              bmp.push(matches > 1);\n            } // matches width of barcode lines\n\n\n            curr = bmp[0];\n            count = 1;\n            lines = [];\n\n            for (_col2 = 0; _col2 < width; _col2 += 1) {\n              if (bmp[_col2] === curr) {\n                count += 1;\n\n                if (_col2 === width - 1) {\n                  lines.push(count);\n                }\n              } else {\n                lines.push(count);\n                count = 1;\n                curr = bmp[_col2];\n              }\n            } // remove empty whitespaces on side of barcode\n\n\n            if (padding.left) lines.shift();\n            if (padding.right) lines.pop(); // Run the decoder\n\n            result = BARCODE_DECODERS[options.barcode](lines, options.type);\n\n            if (!result) {\n              _context.next = 36;\n              break;\n            }\n\n            return _context.abrupt(\"return\", result);\n\n          case 36:\n            _context.next = 14;\n            break;\n\n          case 38:\n            throw new Error('Failed to extract barcode!');\n\n          case 39:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _barcodeDecoder.apply(this, arguments);\n}\n\nif (module && module.exports) {\n  module.exports = barcodeDecoder;\n} else {\n  global.javascriptBarcodeReader = barcodeDecoder;\n}","map":null,"metadata":{},"sourceType":"script"}