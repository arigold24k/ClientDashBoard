{"ast":null,"code":"'use strict';\n\nvar React = require('react');\n\nvar JsBarcode = require('jsbarcode');\n\nvar createClass = require('create-react-class');\n\nvar PropTypes = require('prop-types');\n\nvar getDOMNode; // Super naive semver detection but it's good enough. We support 0.12, 0.13\n// which both have getDOMNode on the ref. 0.14 and 15 make the DOM node the ref.\n\nvar version = React.version.split(/[.-]/);\n\nif (version[0] === '0' && version[1] === '13' || version[1] === '12') {\n  getDOMNode = function getDOMNode(ref) {\n    return ref.getDOMNode();\n  };\n} else {\n  getDOMNode = function getDOMNode(ref) {\n    return ref;\n  };\n}\n\nvar Barcode = createClass({\n  propTypes: {\n    value: PropTypes.string.isRequired,\n    renderer: PropTypes.string,\n    format: PropTypes.string,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    displayValue: PropTypes.bool,\n    fontOptions: PropTypes.string,\n    font: PropTypes.string,\n    textAlign: PropTypes.string,\n    textPosition: PropTypes.string,\n    textMargin: PropTypes.number,\n    fontSize: PropTypes.number,\n    background: PropTypes.string,\n    lineColor: PropTypes.string,\n    margin: PropTypes.number,\n    marginTop: PropTypes.number,\n    marginBottom: PropTypes.number,\n    marginLeft: PropTypes.number,\n    marginRight: PropTypes.number\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      format: 'CODE128',\n      renderer: 'svg',\n      width: 2,\n      height: 100,\n      displayValue: true,\n      fontOptions: '',\n      font: 'monospace',\n      textAlign: 'center',\n      textPosition: 'bottom',\n      textMargin: 2,\n      fontSize: 20,\n      background: '#ffffff',\n      lineColor: '#000000',\n      margin: 10\n    };\n  },\n  shouldComponentUpdate: function shouldComponentUpdate(nextProps) {\n    var _this = this;\n\n    return Object.keys(Barcode.propTypes).some(function (k) {\n      return _this.props[k] !== nextProps[k];\n    });\n  },\n  componentDidMount: function componentDidMount() {\n    this.update();\n  },\n  componentDidUpdate: function componentDidUpdate() {\n    this.update();\n  },\n  update: function update() {\n    var renderElement = getDOMNode(this.refs.renderElement);\n\n    try {\n      new JsBarcode(renderElement, this.props.value, Object.assign({}, this.props));\n    } catch (e) {\n      // prevent stop the parent process\n      window.console.error(e);\n    }\n  },\n  render: function render() {\n    if (this.props.renderer === 'svg') {\n      return React.createElement('svg', {\n        ref: 'renderElement'\n      });\n    } else if (this.props.renderer === 'canvas') {\n      return React.createElement('canvas', {\n        ref: 'renderElement'\n      });\n    }\n  }\n});\nmodule.exports = Barcode;","map":null,"metadata":{},"sourceType":"script"}