{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/* global HTMLImageElement */\n\n/* global HTMLCanvasElement */\n\n/* global SVGElement */\n\n\nvar _getOptionsFromElement = require(\"./getOptionsFromElement.js\");\n\nvar _getOptionsFromElement2 = _interopRequireDefault(_getOptionsFromElement);\n\nvar _renderers = require(\"../renderers\");\n\nvar _renderers2 = _interopRequireDefault(_renderers);\n\nvar _exceptions = require(\"../exceptions/exceptions.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // Takes an element and returns an object with information about how\n// it should be rendered\n// This could also return an array with these objects\n// {\n//   element: The element that the renderer should draw on\n//   renderer: The name of the renderer\n//   afterRender (optional): If something has to done after the renderer\n//     completed, calls afterRender (function)\n//   options (optional): Options that can be defined in the element\n// }\n\n\nfunction getRenderProperties(element) {\n  // If the element is a string, query select call again\n  if (typeof element === \"string\") {\n    return querySelectedRenderProperties(element);\n  } // If element is array. Recursivly call with every object in the array\n  else if (Array.isArray(element)) {\n      var returnArray = [];\n\n      for (var i = 0; i < element.length; i++) {\n        returnArray.push(getRenderProperties(element[i]));\n      }\n\n      return returnArray;\n    } // If element, render on canvas and set the uri as src\n    else if (typeof HTMLCanvasElement !== 'undefined' && element instanceof HTMLImageElement) {\n        return newCanvasRenderProperties(element);\n      } // If SVG\n      else if (element && element.nodeName === 'svg' || typeof SVGElement !== 'undefined' && element instanceof SVGElement) {\n          return {\n            element: element,\n            options: (0, _getOptionsFromElement2.default)(element),\n            renderer: _renderers2.default.SVGRenderer\n          };\n        } // If canvas (in browser)\n        else if (typeof HTMLCanvasElement !== 'undefined' && element instanceof HTMLCanvasElement) {\n            return {\n              element: element,\n              options: (0, _getOptionsFromElement2.default)(element),\n              renderer: _renderers2.default.CanvasRenderer\n            };\n          } // If canvas (in node)\n          else if (element && element.getContext) {\n              return {\n                element: element,\n                renderer: _renderers2.default.CanvasRenderer\n              };\n            } else if (element && (typeof element === \"undefined\" ? \"undefined\" : _typeof(element)) === 'object' && !element.nodeName) {\n              return {\n                element: element,\n                renderer: _renderers2.default.ObjectRenderer\n              };\n            } else {\n              throw new _exceptions.InvalidElementException();\n            }\n}\n\nfunction querySelectedRenderProperties(string) {\n  var selector = document.querySelectorAll(string);\n\n  if (selector.length === 0) {\n    return undefined;\n  } else {\n    var returnArray = [];\n\n    for (var i = 0; i < selector.length; i++) {\n      returnArray.push(getRenderProperties(selector[i]));\n    }\n\n    return returnArray;\n  }\n}\n\nfunction newCanvasRenderProperties(imgElement) {\n  var canvas = document.createElement('canvas');\n  return {\n    element: canvas,\n    options: (0, _getOptionsFromElement2.default)(imgElement),\n    renderer: _renderers2.default.CanvasRenderer,\n    afterRender: function afterRender() {\n      imgElement.setAttribute(\"src\", canvas.toDataURL());\n    }\n  };\n}\n\nexports.default = getRenderProperties;","map":null,"metadata":{},"sourceType":"script"}