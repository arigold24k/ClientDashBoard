{"ast":null,"code":"var bcrypt=require('bcrypt-nodejs');var saltRounds=12;var salt=bcrypt.genSaltSync(saltRounds);var func_={encryptPW:function encryptPW(password){// console.log('This is the data being passed to the encryp function, password ', password);\nvar hash=bcrypt.hashSync(password,salt);// bcrypt.hash(password, saltRounds).then(function(hash) {\n//\n//     if(hash) {\n//         cb(null, hash);\n//         console.log('This is the hash ', err);\n//     }\n//     cb(hash, null);\n//     console.log('This is the hash ', data);\n// });\nif(hash){return hash;}else{return 0;}},checkPW:function checkPW(passwordEnt,passwordIS){var compareVal=bcrypt.compareSync(passwordEnt,passwordIS);if(compareVal){return compareVal;}return 0;}};module.exports=func_;","map":{"version":3,"sources":["C:\\Users\\avidal\\Documents\\WebApps\\clientDashboard\\ClientDashBoard\\client\\src\\functions\\functions.js"],"names":["bcrypt","require","saltRounds","salt","genSaltSync","func_","encryptPW","password","hash","hashSync","checkPW","passwordEnt","passwordIS","compareVal","compareSync","module","exports"],"mappings":"AAAA,GAAMA,CAAAA,MAAM,CAAGC,OAAO,CAAC,eAAD,CAAtB,CACA,GAAMC,CAAAA,UAAU,CAAG,EAAnB,CACA,GAAMC,CAAAA,IAAI,CAAGH,MAAM,CAACI,WAAP,CAAmBF,UAAnB,CAAb,CAEA,GAAMG,CAAAA,KAAK,CAAG,CACVC,SAAS,CAAE,mBAASC,QAAT,CAAmB,CAC1B;AACA,GAAIC,CAAAA,IAAI,CAAGR,MAAM,CAACS,QAAP,CAAgBF,QAAhB,CAA0BJ,IAA1B,CAAX,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAIK,IAAJ,CAAU,CACN,MAAOA,CAAAA,IAAP,CACH,CAFD,IAEK,CACD,MAAO,EAAP,CACH,CACJ,CAlBS,CAmBVE,OAAO,CAAC,iBAASC,WAAT,CAAsBC,UAAtB,CAAkC,CACtC,GAAMC,CAAAA,UAAU,CAAGb,MAAM,CAACc,WAAP,CAAmBH,WAAnB,CAAgCC,UAAhC,CAAnB,CACA,GAAGC,UAAH,CAAe,CACX,MAAOA,CAAAA,UAAP,CACH,OAAO,EAAP,CAEJ,CAzBS,CAAd,CA6BAE,MAAM,CAACC,OAAP,CAAiBX,KAAjB","sourcesContent":["const bcrypt = require('bcrypt-nodejs');\r\nconst saltRounds = 12;\r\nconst salt = bcrypt.genSaltSync(saltRounds);\r\n\r\nconst func_ = {\r\n    encryptPW: function(password) {\r\n        // console.log('This is the data being passed to the encryp function, password ', password);\r\n        let hash = bcrypt.hashSync(password, salt);\r\n        // bcrypt.hash(password, saltRounds).then(function(hash) {\r\n        //\r\n        //     if(hash) {\r\n        //         cb(null, hash);\r\n        //         console.log('This is the hash ', err);\r\n        //     }\r\n        //     cb(hash, null);\r\n        //     console.log('This is the hash ', data);\r\n        // });\r\n        if (hash) {\r\n            return hash;\r\n        }else{\r\n            return 0\r\n        }\r\n    },\r\n    checkPW:function(passwordEnt, passwordIS) {\r\n        const compareVal = bcrypt.compareSync(passwordEnt, passwordIS);\r\n        if(compareVal) {\r\n            return compareVal\r\n        }return 0\r\n\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = func_;\r\n\r\n"]},"metadata":{},"sourceType":"module"}