{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\avidal\\\\Documents\\\\WebApps\\\\clientDashboard\\\\ClientDashBoard\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _defineProperty from \"C:\\\\Users\\\\avidal\\\\Documents\\\\WebApps\\\\clientDashboard\\\\ClientDashBoard\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\avidal\\\\Documents\\\\WebApps\\\\clientDashboard\\\\ClientDashBoard\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\avidal\\\\Documents\\\\WebApps\\\\clientDashboard\\\\ClientDashBoard\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\avidal\\\\Documents\\\\WebApps\\\\clientDashboard\\\\ClientDashBoard\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\avidal\\\\Documents\\\\WebApps\\\\clientDashboard\\\\ClientDashBoard\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\avidal\\\\Documents\\\\WebApps\\\\clientDashboard\\\\ClientDashBoard\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\avidal\\\\Documents\\\\WebApps\\\\clientDashboard\\\\ClientDashBoard\\\\client\\\\src\\\\components\\\\SimpleTable\\\\simpleTable.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport DownArrow from '@material-ui/icons/KeyboardArrowDown';\nimport UpArrow from '@material-ui/icons/KeyboardArrowUp';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport classNames from 'classnames';\nimport { lighten } from '@material-ui/core/styles/colorManipulator';\n\nvar EnhancedTableHead =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EnhancedTableHead, _React$Component);\n\n  function EnhancedTableHead() {\n    _classCallCheck(this, EnhancedTableHead);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(EnhancedTableHead).apply(this, arguments));\n  }\n\n  _createClass(EnhancedTableHead, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props = this.props,\n          onSelectAllClick = _this$props.onSelectAllClick,\n          order = _this$props.order,\n          orderBy = _this$props.orderBy,\n          numSelected = _this$props.numSelected,\n          rowCount = _this$props.rowCount,\n          cols = _this$props.cols;\n      return React.createElement(TableHead, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(TableRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        padding: \"checkbox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(Checkbox, {\n        indeterminate: numSelected > 0 && numSelected < rowCount,\n        checked: numSelected === rowCount,\n        onChange: onSelectAllClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      })), cols.map(function (cols) {\n        return React.createElement(TableCell, {\n          key: cols.id,\n          align: cols.numeric ? 'right' : 'left',\n          padding: cols.disablePadding ? 'none' : 'default',\n          sortDirection: orderBy === cols.id ? order : false,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, React.createElement(Tooltip, {\n          title: \"Sort\",\n          placement: cols.numeric ? 'bottom-end' : 'bottom-start',\n          enterDelay: 300,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }, React.createElement(TableSortLabel, {\n          active: orderBy === cols.id,\n          direction: order,\n          onClick: _this.props.handleSort(cols.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }, cols.label)));\n      }, this)));\n    }\n  }]);\n\n  return EnhancedTableHead;\n}(React.Component);\n\nEnhancedTableHead.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.string.isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired\n};\n\nvar toolbarStyles = function toolbarStyles(theme) {\n  return {\n    root: {\n      paddingRight: theme.spacing.unit\n    },\n    highlight: theme.palette.type === 'light' ? {\n      color: theme.palette.secondary.main,\n      backgroundColor: lighten(theme.palette.secondary.light, 0.85)\n    } : {\n      color: theme.palette.text.primary,\n      backgroundColor: theme.palette.secondary.dark\n    },\n    spacer: {\n      flex: '1 1 100%'\n    },\n    actions: {\n      color: theme.palette.text.secondary\n    },\n    title: {\n      flex: '0 0 auto'\n    }\n  };\n};\n\nvar EnhancedTableToolbar = function EnhancedTableToolbar(props) {\n  var numSelected = props.numSelected,\n      classes = props.classes;\n  return React.createElement(Toolbar, {\n    className: classNames(classes.root, _defineProperty({}, classes.highlight, numSelected > 0)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, numSelected > 0 ? React.createElement(Typography, {\n    color: \"inherit\",\n    variant: \"subtitle1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, numSelected, \" selected\") : React.createElement(Typography, {\n    variant: \"h6\",\n    id: \"tableTitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, \"Products\")), React.createElement(\"div\", {\n    className: classes.spacer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: classes.actions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(Tooltip, {\n    title: \"Filter list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    \"aria-label\": \"Filter list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(FilterListIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  })))));\n};\n\nEnhancedTableToolbar.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired\n};\nEnhancedTableToolbar = withStyles(toolbarStyles)(EnhancedTableToolbar);\n\nvar styles = function styles(theme) {\n  return {\n    root: {\n      width: '100%',\n      marginTop: theme.spacing.unit * 3\n    },\n    table: {\n      minWidth: 1020\n    },\n    tableWrapper: {\n      overflowX: 'auto'\n    }\n  };\n};\n\nvar initialState = {\n  selected: [],\n  page: 0,\n  rowsPerPage: 5,\n  columnToSort: \"\",\n  sortDirection: \"desc\"\n};\n\nvar EnhancedTable =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(EnhancedTable, _React$Component2);\n\n  function EnhancedTable(props) {\n    var _this2;\n\n    _classCallCheck(this, EnhancedTable);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(EnhancedTable).call(this, props));\n    _this2.state = initialState;\n\n    _this2.handleSort = function (columnName) {\n      console.log(\"Sort data is being hit Column Name:\", columnName);\n\n      _this2.setState({\n        columnToSort: columnName,\n        sortDirection: _this2.state.columnToSort === columnName ? _this2.state.sortDirection === 'desc' ? 'asc' : 'desc' : 'asc'\n      });\n\n      console.log(\"State of the state after the update in the sort data function \", _this2.state);\n    };\n\n    _this2.handleSelectAllClick = function (event) {\n      if (event.target.checked) {\n        _this2.setState(function (state) {\n          return {\n            selected: state.data.map(function (n) {\n              return n.id;\n            })\n          };\n        });\n\n        return;\n      }\n\n      _this2.setState({\n        selected: []\n      });\n    };\n\n    _this2.handleClick = function (event, id) {\n      var selected = _this2.state.selected;\n      var selectedIndex = selected.indexOf(id);\n      var newSelected = [];\n\n      if (selectedIndex === -1) {\n        newSelected = newSelected.concat(selected, id);\n      } else if (selectedIndex === 0) {\n        newSelected = newSelected.concat(selected.slice(1));\n      } else if (selectedIndex === selected.length - 1) {\n        newSelected = newSelected.concat(selected.slice(0, -1));\n      } else if (selectedIndex > 0) {\n        newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\n      }\n\n      _this2.setState({\n        selected: newSelected\n      });\n    };\n\n    _this2.handleChangePage = function (event, page) {\n      _this2.setState({\n        page: page\n      });\n    };\n\n    _this2.handleChangeRowsPerPage = function (event) {\n      _this2.setState({\n        rowsPerPage: event.target.value\n      });\n    };\n\n    _this2.isSelected = function (id) {\n      return _this2.state.selected.indexOf(id) !== -1;\n    };\n\n    var dataPassed = _this2.props.dataPassed;\n    _this2.state = _objectSpread({}, initialState, {\n      rows: dataPassed\n    });\n    return _this2;\n  }\n\n  _createClass(EnhancedTable, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(\"Component Did Mount\");\n      var dataPassed = this.props.dataPassed;\n      console.log(\"component will moutn has this array being passed to it \".concat(dataPassed));\n      this.setState({\n        rows: dataPassed\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props2 = this.props,\n          classes = _this$props2.classes,\n          columns = _this$props2.columns,\n          tableTitle = _this$props2.tableTitle;\n      var rows = this.props.dataPassed;\n      var _this$state = this.state,\n          sortDirection = _this$state.sortDirection,\n          columnToSort = _this$state.columnToSort,\n          selected = _this$state.selected,\n          rowsPerPage = _this$state.rowsPerPage,\n          page = _this$state.page;\n      var emptyRows = rowsPerPage - Math.min(rowsPerPage, (rows != null ? rows.length : 0) - page * rowsPerPage);\n      console.log(\"data being passed to table\", rows);\n      return React.createElement(Paper, {\n        className: classes.root,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, React.createElement(EnhancedTableToolbar, {\n        numSelected: selected.length,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: classes.tableWrapper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, React.createElement(Table, {\n        className: classes.table,\n        \"aria-labelledby\": \"tableTitle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, React.createElement(EnhancedTableHead, {\n        numSelected: selected.length,\n        order: sortDirection,\n        orderBy: columnToSort,\n        onSelectAllClick: this.handleSelectAllClick,\n        rowCount: rows.length,\n        cols: columns,\n        handleSort: function handleSort() {\n          return _this3.handleSort.bind(_this3);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }), React.createElement(TableBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(function (row) {\n        return React.createElement(TableRow, {\n          key: row.id,\n          hover: true,\n          role: \"checkbox\",\n          tabIndex: -1,\n          selected: _this3.isSelected(row.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 260\n          },\n          __self: this\n        }, React.createElement(TableCell, {\n          padding: \"checkbox\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 267\n          },\n          __self: this\n        }, React.createElement(Checkbox, {\n          checked: _this3.isSelected(row.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 268\n          },\n          __self: this\n        })), columns.map(function (col) {\n          return React.createElement(TableCell, {\n            component: \"th\",\n            scope: \"row\",\n            align: \"left\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 271\n            },\n            __self: this\n          }, row[col.prop]);\n        }));\n      }), emptyRows > 0 && React.createElement(TableRow, {\n        style: {\n          height: 48 * emptyRows\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        colSpan: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }))))), React.createElement(TablePagination, {\n        rowsPerPageOptions: [5, 10, 25],\n        component: \"div\",\n        count: rows.length,\n        rowsPerPage: rowsPerPage,\n        page: page,\n        backIconButtonProps: {\n          'aria-label': 'Previous Page'\n        },\n        nextIconButtonProps: {\n          'aria-label': 'Next Page'\n        },\n        onChangePage: this.handleChangePage,\n        onChangeRowsPerPage: this.handleChangeRowsPerPage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return EnhancedTable;\n}(React.Component);\n\nEnhancedTable.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(EnhancedTable); // const actionsStyles = theme => ({\n//     root: {\n//         flexShrink: 0,\n//         color: theme.palette.text.secondary,\n//         marginLeft: theme.spacing.unit * 2.5,\n//     },\n// });\n//\n// class TablePaginationActions extends React.Component {\n//     handleFirstPageButtonClick = event => {\n//         this.props.onChangePage(event, 0);\n//     };\n//\n//     handleBackButtonClick = event => {\n//         this.props.onChangePage(event, this.props.page - 1);\n//     };\n//\n//     handleNextButtonClick = event => {\n//         this.props.onChangePage(event, this.props.page + 1);\n//     };\n//\n//     handleLastPageButtonClick = event => {\n//         this.props.onChangePage(\n//             event,\n//             Math.max(0, Math.ceil(this.props.count / this.props.rowsPerPage) - 1),\n//         );\n//     };\n//\n//     render() {\n//         const { classes, count, page, rowsPerPage, theme } = this.props;\n//\n//         return (\n//             <div className={classes.root}>\n//                 <IconButton\n//                     onClick={this.handleFirstPageButtonClick}\n//                     disabled={page === 0}\n//                     aria-label=\"First Page\"\n//                 >\n//                     {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n//                 </IconButton>\n//                 <IconButton\n//                     onClick={this.handleBackButtonClick}\n//                     disabled={page === 0}\n//                     aria-label=\"Previous Page\"\n//                 >\n//                     {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n//                 </IconButton>\n//                 <IconButton\n//                     onClick={this.handleNextButtonClick}\n//                     disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n//                     aria-label=\"Next Page\"\n//                 >\n//                     {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n//                 </IconButton>\n//                 <IconButton\n//                     onClick={this.handleLastPageButtonClick}\n//                     disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n//                     aria-label=\"Last Page\"\n//                 >\n//                     {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n//                 </IconButton>\n//             </div>\n//         );\n//     }\n// }\n//\n// TablePaginationActions.propTypes = {\n//     classes: PropTypes.object.isRequired,\n//     count: PropTypes.number.isRequired,\n//     onChangePage: PropTypes.func.isRequired,\n//     page: PropTypes.number.isRequired,\n//     rowsPerPage: PropTypes.number.isRequired,\n//     theme: PropTypes.object.isRequired,\n// };\n//\n// const TablePaginationActionsWrapped = withStyles(actionsStyles, { withTheme: true })(\n//     TablePaginationActions,\n// );\n//\n// const styles = theme => ({\n//     root: {\n//         width: 'auto',\n//         marginTop: theme.spacing.unit * 3,\n//     },\n//     table: {\n//         minWidth: 500,\n//     },\n//     tableWrapper: {\n//         overflowX: 'auto',\n//     },\n// });\n//\n// const initialState = {\n//     rows: [],\n//     page: 0,\n//     rowsPerPage: 5,\n// };\n//\n// class SimpleTable extends React.Component {\n//     constructor (props) {\n//         super(props);\n//         const {dataPassed} = this.props;\n//         this.state = {\n//                 ...initialState,\n//                 rows: dataPassed\n//         };\n//     }\n//     componentDidMount () {\n//         console.log(\"Component Did Mount\");\n//         const { dataPassed } = this.props;\n//         console.log(`component will moutn has this array being passed to it ${dataPassed}`);\n//         this.setState({\n//             rows: dataPassed\n//         })\n//     }\n//     handleChangePage = (event, page) => {\n//         this.setState({ page });\n//     };\n//     handleChangeRowsPerPage = event => {\n//         this.setState({ page: 0, rowsPerPage: event.target.value });\n//     };\n//     render() {\n//         const { classes, columns, sortDirection, columnToSort } = this.props;\n//         const rows = this.props.dataPassed;\n//         const { rowsPerPage, page } = this.state;\n//         const emptyRows = rowsPerPage - Math.min(rowsPerPage, (rows != null ? rows.length : 0) - page * rowsPerPage);\n//         console.log(\"This is the props \" + sortDirection + \" \" + columnToSort);\n//         return (\n//             <Paper className={classes.root}>\n//                 <div className={classes.tableWrapper}>\n//                     <Table className={classes.table}>\n//                                      <TableHead>\n//                                        <TableRow>\n//                                            <TableCell padding=\"checkbox\">\n//                                                <Checkbox />\n//                                            </TableCell>\n//                                            {columns.map((col) => (\n//                                                <TableCell align=\"left\">\n//                                                    <div onClick={() => this.props.handleSort(col.prop)}><span>{col.name} {columnToSort === col.prop ? (sortDirection === \"asc\" ? <UpArrow/> : <DownArrow/>) : null} </span></div>\n//                                                </TableCell>\n//                                            ))}\n//                                         </TableRow>\n//                                        </TableHead>\n//                         <TableBody>\n//                             {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => (\n//                                 <TableRow key={row.id}>\n//\n//                                     {columns.map((col) => (\n//                                         <TableCell component=\"th\" scope=\"row\" align=\"left\">\n//                                             {row[col.prop]}\n//                                         </TableCell>\n//                                     ))}\n//                                 </TableRow>\n//                             ))}\n//                             {emptyRows > 0 && (\n//                                 <TableRow style={{ height: 48 * emptyRows }}>\n//                                     <TableCell colSpan={6} />\n//                                 </TableRow>\n//                             )}\n//                         </TableBody>\n//                         <TableFooter>\n//                             <TableRow>\n//                                 <TablePagination\n//                                     rowsPerPageOptions={[5, 10, 25]}\n//                                     colSpan={3}\n//                                     count={rows.length}\n//                                     rowsPerPage={rowsPerPage}\n//                                     page={page}\n//                                     SelectProps={{\n//                                         native: true,\n//                                     }}\n//                                     onChangePage={this.handleChangePage}\n//                                     onChangeRowsPerPage={this.handleChangeRowsPerPage}\n//                                     ActionsComponent={TablePaginationActionsWrapped}\n//                                 />\n//                             </TableRow>\n//                         </TableFooter>\n//                     </Table>\n//                 </div>\n//             </Paper>\n//         );\n//     }\n// }\n// SimpleTable.propTypes = {\n//     classes: PropTypes.object.isRequired,\n// };\n//\n// export default withStyles(styles)(SimpleTable);","map":{"version":3,"sources":["C:\\Users\\avidal\\Documents\\WebApps\\clientDashboard\\ClientDashBoard\\client\\src\\components\\SimpleTable\\simpleTable.js"],"names":["React","PropTypes","withStyles","Table","TableBody","TableCell","TableHead","TableRow","Paper","TableFooter","TablePagination","IconButton","FirstPageIcon","KeyboardArrowLeft","KeyboardArrowRight","DownArrow","UpArrow","LastPageIcon","Checkbox","Tooltip","TableSortLabel","Typography","Toolbar","FilterListIcon","classNames","lighten","EnhancedTableHead","props","onSelectAllClick","order","orderBy","numSelected","rowCount","cols","map","id","numeric","disablePadding","handleSort","label","Component","propTypes","number","isRequired","onRequestSort","func","string","toolbarStyles","theme","root","paddingRight","spacing","unit","highlight","palette","type","color","secondary","main","backgroundColor","light","text","primary","dark","spacer","flex","actions","title","EnhancedTableToolbar","classes","object","styles","width","marginTop","table","minWidth","tableWrapper","overflowX","initialState","selected","page","rowsPerPage","columnToSort","sortDirection","EnhancedTable","state","columnName","console","log","setState","handleSelectAllClick","event","target","checked","data","n","handleClick","selectedIndex","indexOf","newSelected","concat","slice","length","handleChangePage","handleChangeRowsPerPage","value","isSelected","dataPassed","rows","columns","tableTitle","emptyRows","Math","min","bind","row","col","prop","height"],"mappings":"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":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport DownArrow from '@material-ui/icons/KeyboardArrowDown';\r\nimport UpArrow from '@material-ui/icons/KeyboardArrowUp';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport classNames from 'classnames';\r\nimport { lighten } from '@material-ui/core/styles/colorManipulator';\r\n\r\n\r\nclass EnhancedTableHead extends React.Component {\r\n\r\n    render() {\r\n        const { onSelectAllClick, order, orderBy, numSelected, rowCount, cols } = this.props;\r\n\r\n        return (\r\n            <TableHead>\r\n                <TableRow>\r\n                    <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                            checked={numSelected === rowCount}\r\n                            onChange={onSelectAllClick}\r\n                        />\r\n                    </TableCell>\r\n                    {cols.map(\r\n                        cols => (\r\n                            <TableCell\r\n                                key={cols.id}\r\n                                align={cols.numeric ? 'right' : 'left'}\r\n                                padding={cols.disablePadding ? 'none' : 'default'}\r\n                                sortDirection={orderBy === cols.id ? order : false}\r\n                            >\r\n                                <Tooltip\r\n                                    title=\"Sort\"\r\n                                    placement={cols.numeric ? 'bottom-end' : 'bottom-start'}\r\n                                    enterDelay={300}\r\n                                >\r\n                                    <TableSortLabel\r\n                                        active={orderBy === cols.id}\r\n                                        direction={order}\r\n                                        onClick={this.props.handleSort(cols.id)}\r\n                                    >\r\n                                        {cols.label}\r\n                                    </TableSortLabel>\r\n                                </Tooltip>\r\n                            </TableCell>\r\n                        ),\r\n                        this,\r\n                    )}\r\n                </TableRow>\r\n            </TableHead>\r\n        );\r\n    }\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n    onRequestSort: PropTypes.func.isRequired,\r\n    onSelectAllClick: PropTypes.func.isRequired,\r\n    order: PropTypes.string.isRequired,\r\n    orderBy: PropTypes.string.isRequired,\r\n    rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst toolbarStyles = theme => ({\r\n    root: {\r\n        paddingRight: theme.spacing.unit,\r\n    },\r\n    highlight:\r\n        theme.palette.type === 'light'\r\n            ? {\r\n                color: theme.palette.secondary.main,\r\n                backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n            }\r\n            : {\r\n                color: theme.palette.text.primary,\r\n                backgroundColor: theme.palette.secondary.dark,\r\n            },\r\n    spacer: {\r\n        flex: '1 1 100%',\r\n    },\r\n    actions: {\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    title: {\r\n        flex: '0 0 auto',\r\n    },\r\n});\r\n\r\nlet EnhancedTableToolbar = props => {\r\n    const { numSelected, classes } = props;\r\n\r\n    return (\r\n        <Toolbar\r\n            className={classNames(classes.root, {\r\n                [classes.highlight]: numSelected > 0,\r\n            })}\r\n        >\r\n            <div className={classes.title}>\r\n                {numSelected > 0 ? (\r\n                    <Typography color=\"inherit\" variant=\"subtitle1\">\r\n                        {numSelected} selected\r\n                    </Typography>\r\n                ) : (\r\n                    <Typography variant=\"h6\" id=\"tableTitle\">\r\n                        Products\r\n                    </Typography>\r\n                )}\r\n            </div>\r\n            <div className={classes.spacer} />\r\n            <div className={classes.actions}>\r\n                <Tooltip title=\"Filter list\">\r\n                    <IconButton aria-label=\"Filter list\">\r\n                        <FilterListIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            </div>\r\n        </Toolbar>\r\n    );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nEnhancedTableToolbar = withStyles(toolbarStyles)(EnhancedTableToolbar);\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        marginTop: theme.spacing.unit * 3,\r\n    },\r\n    table: {\r\n        minWidth: 1020,\r\n    },\r\n    tableWrapper: {\r\n        overflowX: 'auto',\r\n    },\r\n});\r\nconst initialState = {\r\n        selected: [],\r\n        page: 0,\r\n        rowsPerPage: 5,\r\n        columnToSort: \"\",\r\n        sortDirection: \"desc\",\r\n\r\n};\r\nclass EnhancedTable extends React.Component {\r\n    state = initialState;\r\n    constructor (props) {\r\n        super(props);\r\n        const {dataPassed} = this.props;\r\n        this.state = {\r\n             ...initialState,\r\n            rows: dataPassed\r\n        };\r\n    }\r\n\r\n    handleSort = (columnName) => {\r\n        console.log(\"Sort data is being hit Column Name:\", columnName);\r\n        this.setState({\r\n            columnToSort: columnName,\r\n            sortDirection: this.state.columnToSort === columnName ? (this.state.sortDirection === 'desc' ? 'asc' : 'desc') : 'asc'\r\n        });\r\n        console.log(\"State of the state after the update in the sort data function \", this.state);\r\n    };\r\n\r\n    componentDidMount () {\r\n        console.log(\"Component Did Mount\");\r\n        const { dataPassed } = this.props;\r\n        console.log(`component will moutn has this array being passed to it ${dataPassed}`);\r\n        this.setState({\r\n            rows: dataPassed\r\n        })\r\n    }\r\n\r\n    handleSelectAllClick = event => {\r\n        if (event.target.checked) {\r\n            this.setState(state => ({ selected: state.data.map(n => n.id) }));\r\n            return;\r\n        }\r\n        this.setState({ selected: [] });\r\n    };\r\n\r\n    handleClick = (event, id) => {\r\n        const { selected } = this.state;\r\n        const selectedIndex = selected.indexOf(id);\r\n        let newSelected = [];\r\n\r\n        if (selectedIndex === -1) {\r\n            newSelected = newSelected.concat(selected, id);\r\n        } else if (selectedIndex === 0) {\r\n            newSelected = newSelected.concat(selected.slice(1));\r\n        } else if (selectedIndex === selected.length - 1) {\r\n            newSelected = newSelected.concat(selected.slice(0, -1));\r\n        } else if (selectedIndex > 0) {\r\n            newSelected = newSelected.concat(\r\n                selected.slice(0, selectedIndex),\r\n                selected.slice(selectedIndex + 1),\r\n            );\r\n        }\r\n\r\n        this.setState({ selected: newSelected });\r\n    };\r\n\r\n    handleChangePage = (event, page) => {\r\n        this.setState({ page });\r\n    };\r\n\r\n    handleChangeRowsPerPage = event => {\r\n        this.setState({ rowsPerPage: event.target.value });\r\n    };\r\n\r\n    isSelected = id => this.state.selected.indexOf(id) !== -1;\r\n\r\n    render() {\r\n        const { classes, columns, tableTitle} = this.props;\r\n        const rows = this.props.dataPassed;\r\n        const { sortDirection, columnToSort, selected, rowsPerPage, page } = this.state;\r\n        const emptyRows = rowsPerPage - Math.min(rowsPerPage, (rows != null ? rows.length : 0) - page * rowsPerPage);\r\n\r\n        console.log(\"data being passed to table\", rows);\r\n\r\n        return (\r\n            <Paper className={classes.root}>\r\n                <EnhancedTableToolbar numSelected={selected.length} />\r\n                <div className={classes.tableWrapper}>\r\n                    <Table className={classes.table} aria-labelledby=\"tableTitle\">\r\n                        <EnhancedTableHead\r\n                            numSelected={selected.length}\r\n                            order={sortDirection}\r\n                            orderBy={columnToSort}\r\n                            onSelectAllClick={this.handleSelectAllClick}\r\n                            rowCount={rows.length}\r\n                            cols={columns}\r\n                            handleSort={() => this.handleSort.bind(this)}\r\n                        />\r\n                        <TableBody>\r\n                            {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => (\r\n                                <TableRow\r\n                                    key={row.id}\r\n                                    hover\r\n                                    role=\"checkbox\"\r\n                                    tabIndex={-1}\r\n                                    selected={this.isSelected(row.id)}\r\n                                >\r\n                                    <TableCell padding=\"checkbox\">\r\n                                        <Checkbox checked={this.isSelected(row.id)} />\r\n                                    </TableCell>\r\n                                    {columns.map((col) => (\r\n                                        <TableCell component=\"th\" scope=\"row\" align=\"left\">\r\n                                            {row[col.prop]}\r\n                                        </TableCell>\r\n                                    ))}\r\n                                </TableRow>\r\n                            ))}\r\n                            {emptyRows > 0 && (\r\n                                <TableRow style={{ height: 48 * emptyRows }}>\r\n                                    <TableCell colSpan={6} />\r\n                                </TableRow>\r\n                            )}\r\n                        </TableBody>\r\n                    </Table>\r\n                </div>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component=\"div\"\r\n                    count={rows.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    backIconButtonProps={{\r\n                        'aria-label': 'Previous Page',\r\n                    }}\r\n                    nextIconButtonProps={{\r\n                        'aria-label': 'Next Page',\r\n                    }}\r\n                    onChangePage={this.handleChangePage}\r\n                    onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n        );\r\n    }\r\n}\r\n\r\nEnhancedTable.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(EnhancedTable);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const actionsStyles = theme => ({\r\n//     root: {\r\n//         flexShrink: 0,\r\n//         color: theme.palette.text.secondary,\r\n//         marginLeft: theme.spacing.unit * 2.5,\r\n//     },\r\n// });\r\n//\r\n// class TablePaginationActions extends React.Component {\r\n//     handleFirstPageButtonClick = event => {\r\n//         this.props.onChangePage(event, 0);\r\n//     };\r\n//\r\n//     handleBackButtonClick = event => {\r\n//         this.props.onChangePage(event, this.props.page - 1);\r\n//     };\r\n//\r\n//     handleNextButtonClick = event => {\r\n//         this.props.onChangePage(event, this.props.page + 1);\r\n//     };\r\n//\r\n//     handleLastPageButtonClick = event => {\r\n//         this.props.onChangePage(\r\n//             event,\r\n//             Math.max(0, Math.ceil(this.props.count / this.props.rowsPerPage) - 1),\r\n//         );\r\n//     };\r\n//\r\n//     render() {\r\n//         const { classes, count, page, rowsPerPage, theme } = this.props;\r\n//\r\n//         return (\r\n//             <div className={classes.root}>\r\n//                 <IconButton\r\n//                     onClick={this.handleFirstPageButtonClick}\r\n//                     disabled={page === 0}\r\n//                     aria-label=\"First Page\"\r\n//                 >\r\n//                     {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n//                 </IconButton>\r\n//                 <IconButton\r\n//                     onClick={this.handleBackButtonClick}\r\n//                     disabled={page === 0}\r\n//                     aria-label=\"Previous Page\"\r\n//                 >\r\n//                     {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n//                 </IconButton>\r\n//                 <IconButton\r\n//                     onClick={this.handleNextButtonClick}\r\n//                     disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n//                     aria-label=\"Next Page\"\r\n//                 >\r\n//                     {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n//                 </IconButton>\r\n//                 <IconButton\r\n//                     onClick={this.handleLastPageButtonClick}\r\n//                     disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n//                     aria-label=\"Last Page\"\r\n//                 >\r\n//                     {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n//                 </IconButton>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n//\r\n// TablePaginationActions.propTypes = {\r\n//     classes: PropTypes.object.isRequired,\r\n//     count: PropTypes.number.isRequired,\r\n//     onChangePage: PropTypes.func.isRequired,\r\n//     page: PropTypes.number.isRequired,\r\n//     rowsPerPage: PropTypes.number.isRequired,\r\n//     theme: PropTypes.object.isRequired,\r\n// };\r\n//\r\n// const TablePaginationActionsWrapped = withStyles(actionsStyles, { withTheme: true })(\r\n//     TablePaginationActions,\r\n// );\r\n//\r\n// const styles = theme => ({\r\n//     root: {\r\n//         width: 'auto',\r\n//         marginTop: theme.spacing.unit * 3,\r\n//     },\r\n//     table: {\r\n//         minWidth: 500,\r\n//     },\r\n//     tableWrapper: {\r\n//         overflowX: 'auto',\r\n//     },\r\n// });\r\n//\r\n// const initialState = {\r\n//     rows: [],\r\n//     page: 0,\r\n//     rowsPerPage: 5,\r\n// };\r\n//\r\n// class SimpleTable extends React.Component {\r\n//     constructor (props) {\r\n//         super(props);\r\n//         const {dataPassed} = this.props;\r\n//         this.state = {\r\n//                 ...initialState,\r\n//                 rows: dataPassed\r\n//         };\r\n//     }\r\n//     componentDidMount () {\r\n//         console.log(\"Component Did Mount\");\r\n//         const { dataPassed } = this.props;\r\n//         console.log(`component will moutn has this array being passed to it ${dataPassed}`);\r\n//         this.setState({\r\n//             rows: dataPassed\r\n//         })\r\n//     }\r\n//     handleChangePage = (event, page) => {\r\n//         this.setState({ page });\r\n//     };\r\n//     handleChangeRowsPerPage = event => {\r\n//         this.setState({ page: 0, rowsPerPage: event.target.value });\r\n//     };\r\n//     render() {\r\n//         const { classes, columns, sortDirection, columnToSort } = this.props;\r\n//         const rows = this.props.dataPassed;\r\n//         const { rowsPerPage, page } = this.state;\r\n//         const emptyRows = rowsPerPage - Math.min(rowsPerPage, (rows != null ? rows.length : 0) - page * rowsPerPage);\r\n//         console.log(\"This is the props \" + sortDirection + \" \" + columnToSort);\r\n//         return (\r\n//             <Paper className={classes.root}>\r\n//                 <div className={classes.tableWrapper}>\r\n//                     <Table className={classes.table}>\r\n//                                      <TableHead>\r\n//                                        <TableRow>\r\n//                                            <TableCell padding=\"checkbox\">\r\n//                                                <Checkbox />\r\n//                                            </TableCell>\r\n//                                            {columns.map((col) => (\r\n//                                                <TableCell align=\"left\">\r\n//                                                    <div onClick={() => this.props.handleSort(col.prop)}><span>{col.name} {columnToSort === col.prop ? (sortDirection === \"asc\" ? <UpArrow/> : <DownArrow/>) : null} </span></div>\r\n//                                                </TableCell>\r\n//                                            ))}\r\n//                                         </TableRow>\r\n//                                        </TableHead>\r\n//                         <TableBody>\r\n//                             {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => (\r\n//                                 <TableRow key={row.id}>\r\n//\r\n//                                     {columns.map((col) => (\r\n//                                         <TableCell component=\"th\" scope=\"row\" align=\"left\">\r\n//                                             {row[col.prop]}\r\n//                                         </TableCell>\r\n//                                     ))}\r\n//                                 </TableRow>\r\n//                             ))}\r\n//                             {emptyRows > 0 && (\r\n//                                 <TableRow style={{ height: 48 * emptyRows }}>\r\n//                                     <TableCell colSpan={6} />\r\n//                                 </TableRow>\r\n//                             )}\r\n//                         </TableBody>\r\n//                         <TableFooter>\r\n//                             <TableRow>\r\n//                                 <TablePagination\r\n//                                     rowsPerPageOptions={[5, 10, 25]}\r\n//                                     colSpan={3}\r\n//                                     count={rows.length}\r\n//                                     rowsPerPage={rowsPerPage}\r\n//                                     page={page}\r\n//                                     SelectProps={{\r\n//                                         native: true,\r\n//                                     }}\r\n//                                     onChangePage={this.handleChangePage}\r\n//                                     onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n//                                     ActionsComponent={TablePaginationActionsWrapped}\r\n//                                 />\r\n//                             </TableRow>\r\n//                         </TableFooter>\r\n//                     </Table>\r\n//                 </div>\r\n//             </Paper>\r\n//         );\r\n//     }\r\n// }\r\n// SimpleTable.propTypes = {\r\n//     classes: PropTypes.object.isRequired,\r\n// };\r\n//\r\n// export default withStyles(styles)(SimpleTable);"]},"metadata":{},"sourceType":"module"}