{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _constants = require('./constants'); // Match Set functions\n\n\nvar matchSetALength = function matchSetALength(string) {\n  return string.match(new RegExp('^' + _constants.A_CHARS + '*'))[0].length;\n};\n\nvar matchSetBLength = function matchSetBLength(string) {\n  return string.match(new RegExp('^' + _constants.B_CHARS + '*'))[0].length;\n};\n\nvar matchSetC = function matchSetC(string) {\n  return string.match(new RegExp('^' + _constants.C_CHARS + '*'))[0];\n}; // CODE128A or CODE128B\n\n\nfunction autoSelectFromAB(string, isA) {\n  var ranges = isA ? _constants.A_CHARS : _constants.B_CHARS;\n  var untilC = string.match(new RegExp('^(' + ranges + '+?)(([0-9]{2}){2,})([^0-9]|$)'));\n\n  if (untilC) {\n    return untilC[1] + String.fromCharCode(204) + autoSelectFromC(string.substring(untilC[1].length));\n  }\n\n  var chars = string.match(new RegExp('^' + ranges + '+'))[0];\n\n  if (chars.length === string.length) {\n    return string;\n  }\n\n  return chars + String.fromCharCode(isA ? 205 : 206) + autoSelectFromAB(string.substring(chars.length), !isA);\n} // CODE128C\n\n\nfunction autoSelectFromC(string) {\n  var cMatch = matchSetC(string);\n  var length = cMatch.length;\n\n  if (length === string.length) {\n    return string;\n  }\n\n  string = string.substring(length); // Select A/B depending on the longest match\n\n  var isA = matchSetALength(string) >= matchSetBLength(string);\n  return cMatch + String.fromCharCode(isA ? 206 : 205) + autoSelectFromAB(string, isA);\n} // Detect Code Set (A, B or C) and format the string\n\n\nexports.default = function (string) {\n  var newString = void 0;\n  var cLength = matchSetC(string).length; // Select 128C if the string start with enough digits\n\n  if (cLength >= 2) {\n    newString = _constants.C_START_CHAR + autoSelectFromC(string);\n  } else {\n    // Select A/B depending on the longest match\n    var isA = matchSetALength(string) > matchSetBLength(string);\n    newString = (isA ? _constants.A_START_CHAR : _constants.B_START_CHAR) + autoSelectFromAB(string, isA);\n  }\n\n  return newString.replace(/[\\xCD\\xCE]([^])[\\xCD\\xCE]/, // Any sequence between 205 and 206 characters\n  function (match, char) {\n    return String.fromCharCode(203) + char;\n  });\n};","map":null,"metadata":{},"sourceType":"script"}