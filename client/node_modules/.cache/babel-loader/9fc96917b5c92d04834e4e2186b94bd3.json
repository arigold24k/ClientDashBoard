{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\avidal\\\\Documents\\\\WebApps\\\\clientDashboard\\\\ClientDashBoard\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _defineProperty from \"C:\\\\Users\\\\avidal\\\\Documents\\\\WebApps\\\\clientDashboard\\\\ClientDashBoard\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\avidal\\\\Documents\\\\WebApps\\\\clientDashboard\\\\ClientDashBoard\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\avidal\\\\Documents\\\\WebApps\\\\clientDashboard\\\\ClientDashBoard\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\avidal\\\\Documents\\\\WebApps\\\\clientDashboard\\\\ClientDashBoard\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\avidal\\\\Documents\\\\WebApps\\\\clientDashboard\\\\ClientDashBoard\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\avidal\\\\Documents\\\\WebApps\\\\clientDashboard\\\\ClientDashBoard\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\avidal\\\\Documents\\\\WebApps\\\\clientDashboard\\\\ClientDashBoard\\\\client\\\\src\\\\components\\\\SimpleTable\\\\simpleTable.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport classNames from 'classnames';\nimport { lighten } from '@material-ui/core/styles/colorManipulator';\nimport orderBy from 'lodash/orderBy';\nimport TextField from '@material-ui/core/TextField';\n\nvar EnhancedTableHead =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EnhancedTableHead, _React$Component);\n\n  function EnhancedTableHead(props) {\n    _classCallCheck(this, EnhancedTableHead);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(EnhancedTableHead).call(this, props));\n  }\n\n  _createClass(EnhancedTableHead, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props = this.props,\n          onSelectAllClick = _this$props.onSelectAllClick,\n          order = _this$props.order,\n          orderBy = _this$props.orderBy,\n          numSelected = _this$props.numSelected,\n          rowCount = _this$props.rowCount,\n          cols = _this$props.cols;\n      console.log(\"Enhanced header, Order: \" + order + \". OrderBy: \" + orderBy);\n      console.log(\"Enhanced header, cols props \" + cols[0].id);\n      return React.createElement(TableHead, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, React.createElement(TableRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        padding: \"checkbox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(Checkbox, {\n        indeterminate: numSelected > 0 && numSelected < rowCount,\n        checked: numSelected === rowCount,\n        onChange: onSelectAllClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      })), cols.map(function (cols) {\n        return React.createElement(TableCell, {\n          key: cols.id,\n          align: cols.numeric ? 'right' : 'left',\n          display: \"flex\",\n          padding: cols.disablePadding ? 'none' : 'default',\n          sortDirection: orderBy === cols.id ? order : false,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          display: \"block\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, React.createElement(Tooltip, {\n          title: \"Sort\",\n          placement: cols.numeric ? 'bottom-end' : 'bottom-start',\n          enterDelay: 300,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, React.createElement(TableSortLabel, {\n          active: orderBy === cols.id,\n          direction: order,\n          onClick: function onClick(event) {\n            return _this.props.handleSort1(event, cols.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, cols.label))), React.createElement(\"div\", {\n          display: \"block\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, React.createElement(TextField, {\n          name: cols.id,\n          hintText: \"Query\",\n          floatingLabelText: \"Query\",\n          value: _this.props.query,\n          onChange: function onChange(e) {\n            return _this.props.handleQueryChange(e);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        })));\n      }, this)));\n    }\n  }]);\n\n  return EnhancedTableHead;\n}(React.Component);\n\nEnhancedTableHead.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.string.isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired\n};\n\nvar toolbarStyles = function toolbarStyles(theme) {\n  return {\n    root: {\n      paddingRight: theme.spacing.unit\n    },\n    highlight: theme.palette.type === 'light' ? {\n      color: theme.palette.secondary.main,\n      backgroundColor: lighten(theme.palette.secondary.light, 0.85)\n    } : {\n      color: theme.palette.text.primary,\n      backgroundColor: theme.palette.secondary.dark\n    },\n    spacer: {\n      flex: '1 1 100%'\n    },\n    actions: {\n      color: theme.palette.text.secondary\n    },\n    title: {\n      flex: '0 0 auto'\n    }\n  };\n};\n\nvar EnhancedTableToolbar = function EnhancedTableToolbar(props) {\n  var numSelected = props.numSelected,\n      classes = props.classes,\n      title = props.title;\n  return React.createElement(Toolbar, {\n    className: classNames(classes.root, _defineProperty({}, classes.highlight, numSelected > 0)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, numSelected > 0 ? React.createElement(Typography, {\n    color: \"inherit\",\n    variant: \"subtitle1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, numSelected, \" selected\") : React.createElement(Typography, {\n    variant: \"h6\",\n    id: \"tableTitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, title)), React.createElement(\"div\", {\n    className: classes.spacer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: classes.actions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }));\n};\n\nEnhancedTableToolbar.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired\n};\nEnhancedTableToolbar = withStyles(toolbarStyles)(EnhancedTableToolbar);\n\nvar styles = function styles(theme) {\n  return {\n    root: {\n      width: '100%',\n      marginTop: theme.spacing.unit * 3,\n      color: \"green\"\n    },\n    table: {\n      minWidth: 1020,\n      color: 'green'\n    },\n    tableWrapper: {\n      overflowX: 'auto'\n    }\n  };\n};\n\nvar initialState = {\n  selected: [],\n  page: 0,\n  rowsPerPage: 5,\n  columnToSort: '',\n  sortDirection: 'desc',\n  query: '',\n  columnToQuery: ''\n};\n\nvar EnhancedTable =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(EnhancedTable, _React$Component2);\n\n  function EnhancedTable(props) {\n    var _this2;\n\n    _classCallCheck(this, EnhancedTable);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(EnhancedTable).call(this, props));\n    _this2.state = initialState;\n\n    _this2.handleSort = function (event, columnName) {\n      console.log(\"sort event object: \");\n      console.log(\"Sort data is being hit Column Name:\", columnName);\n\n      _this2.setState({\n        columnToSort: columnName,\n        sortDirection: _this2.state.columnToSort === columnName ? _this2.state.sortDirection === 'desc' ? 'asc' : 'desc' : 'asc'\n      });\n\n      console.log(\"State of the state after the update in the sort data function \", _this2.state);\n    };\n\n    _this2.handleQueryChange1 = function (event) {\n      _this2.setState({\n        columnToQuery: event.target.name,\n        query: event.target.value\n      });\n    };\n\n    _this2.handleSelectAllClick = function (event) {\n      _this2.props.handleSelAll(event.target.checked, _this2.state.rows);\n    };\n\n    _this2.handleClick = function (event, id) {\n      _this2.props.handleSelected(id);\n    };\n\n    _this2.handleChangePage = function (event, page) {\n      _this2.setState({\n        page: page\n      });\n    };\n\n    _this2.handleChangeRowsPerPage = function (event) {\n      _this2.setState({\n        rowsPerPage: event.target.value\n      });\n    };\n\n    _this2.isSelected = function (id) {\n      return _this2.props.selected.indexOf(id) !== -1;\n    };\n\n    var _this2$props = _this2.props,\n        dataPassed = _this2$props.dataPassed,\n        selected = _this2$props.selected;\n    _this2.state = _objectSpread({}, initialState, {\n      rows: dataPassed,\n      selected: selected\n    });\n    return _this2;\n  }\n\n  _createClass(EnhancedTable, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(\"Component Did Mount\");\n      var dataPassed = this.props.dataPassed;\n      console.log(\"component will moutn has this array being passed to it \".concat(dataPassed));\n      this.setState({\n        rows: dataPassed\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props2 = this.props,\n          classes = _this$props2.classes,\n          columns = _this$props2.columns,\n          tableTitle = _this$props2.tableTitle,\n          selected = _this$props2.selected;\n      var rows = this.props.dataPassed;\n      var _this$state = this.state,\n          sortDirection = _this$state.sortDirection,\n          columnToSort = _this$state.columnToSort,\n          rowsPerPage = _this$state.rowsPerPage,\n          page = _this$state.page;\n      var emptyRows = rowsPerPage - Math.min(rowsPerPage, (rows != null ? rows.length : 0) - page * rowsPerPage);\n      var formQuery = this.state.query.toLowerCase();\n      console.log(\"data being passed to table\", this.state.columnToSort);\n      console.log(\"data being passed to table, columns\", columns);\n      console.log(\"State in the table, \", this.state);\n      return React.createElement(Paper, {\n        className: classes.root,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, React.createElement(EnhancedTableToolbar, {\n        numSelected: selected.length,\n        title: tableTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: classes.tableWrapper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, React.createElement(Table, {\n        className: classes.table,\n        \"aria-labelledby\": tableTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, React.createElement(EnhancedTableHead, {\n        numSelected: selected.length,\n        order: sortDirection,\n        orderBy: columnToSort,\n        onSelectAllClick: this.handleSelectAllClick,\n        rowCount: rows.length,\n        cols: columns,\n        handleSort1: this.handleSort,\n        handleQueryChange: this.handleQueryChange1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }), React.createElement(TableBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, orderBy(this.state.query ? rows.filter(function (x) {\n        return x[_this3.state.columnToQuery].toLowerCase().includes(formQuery);\n      }) : rows, this.state.columnToSort, this.state.sortDirection).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(function (row) {\n        return React.createElement(TableRow, {\n          key: row.id,\n          hover: true,\n          onClick: function onClick(event) {\n            return _this3.handleClick(event, row.id);\n          },\n          role: \"checkbox\",\n          tabIndex: -1,\n          selected: _this3.isSelected(row.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 257\n          },\n          __self: this\n        }, React.createElement(TableCell, {\n          padding: \"checkbox\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 265\n          },\n          __self: this\n        }, React.createElement(Checkbox, {\n          checked: _this3.isSelected(row.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 266\n          },\n          __self: this\n        })), columns.map(function (col) {\n          return React.createElement(TableCell, {\n            component: \"th\",\n            scope: \"row\",\n            align: col.numeric ? \"right\" : \"left\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 269\n            },\n            __self: this\n          }, col.numeric ? row[col.id].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") : row[col.id]);\n        }));\n      }), emptyRows > 0 && React.createElement(TableRow, {\n        style: {\n          height: 48 * emptyRows\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        colSpan: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }))))), React.createElement(TablePagination, {\n        rowsPerPageOptions: [5, 10, 25],\n        component: \"div\",\n        count: rows.length,\n        rowsPerPage: rowsPerPage,\n        page: page,\n        backIconButtonProps: {\n          'aria-label': 'Previous Page'\n        },\n        nextIconButtonProps: {\n          'aria-label': 'Next Page'\n        },\n        onChangePage: this.handleChangePage,\n        onChangeRowsPerPage: this.handleChangeRowsPerPage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return EnhancedTable;\n}(React.Component);\n\nEnhancedTable.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(EnhancedTable); // const actionsStyles = theme => ({\n//     root: {\n//         flexShrink: 0,\n//         color: theme.palette.text.secondary,\n//         marginLeft: theme.spacing.unit * 2.5,\n//     },\n// });\n//\n// class TablePaginationActions extends React.Component {\n//     handleFirstPageButtonClick = event => {\n//         this.props.onChangePage(event, 0);\n//     };\n//\n//     handleBackButtonClick = event => {\n//         this.props.onChangePage(event, this.props.page - 1);\n//     };\n//\n//     handleNextButtonClick = event => {\n//         this.props.onChangePage(event, this.props.page + 1);\n//     };\n//\n//     handleLastPageButtonClick = event => {\n//         this.props.onChangePage(\n//             event,\n//             Math.max(0, Math.ceil(this.props.count / this.props.rowsPerPage) - 1),\n//         );\n//     };\n//\n//     render() {\n//         const { classes, count, page, rowsPerPage, theme } = this.props;\n//\n//         return (\n//             <div className={classes.root}>\n//                 <IconButton\n//                     onClick={this.handleFirstPageButtonClick}\n//                     disabled={page === 0}\n//                     aria-label=\"First Page\"\n//                 >\n//                     {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n//                 </IconButton>\n//                 <IconButton\n//                     onClick={this.handleBackButtonClick}\n//                     disabled={page === 0}\n//                     aria-label=\"Previous Page\"\n//                 >\n//                     {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n//                 </IconButton>\n//                 <IconButton\n//                     onClick={this.handleNextButtonClick}\n//                     disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n//                     aria-label=\"Next Page\"\n//                 >\n//                     {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n//                 </IconButton>\n//                 <IconButton\n//                     onClick={this.handleLastPageButtonClick}\n//                     disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n//                     aria-label=\"Last Page\"\n//                 >\n//                     {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n//                 </IconButton>\n//             </div>\n//         );\n//     }\n// }\n//\n// TablePaginationActions.propTypes = {\n//     classes: PropTypes.object.isRequired,\n//     count: PropTypes.number.isRequired,\n//     onChangePage: PropTypes.func.isRequired,\n//     page: PropTypes.number.isRequired,\n//     rowsPerPage: PropTypes.number.isRequired,\n//     theme: PropTypes.object.isRequired,\n// };\n//\n// const TablePaginationActionsWrapped = withStyles(actionsStyles, { withTheme: true })(\n//     TablePaginationActions,\n// );\n//\n// const styles = theme => ({\n//     root: {\n//         width: 'auto',\n//         marginTop: theme.spacing.unit * 3,\n//     },\n//     table: {\n//         minWidth: 500,\n//     },\n//     tableWrapper: {\n//         overflowX: 'auto',\n//     },\n// });\n//\n// const initialState = {\n//     rows: [],\n//     page: 0,\n//     rowsPerPage: 5,\n// };\n//\n// class SimpleTable extends React.Component {\n//     constructor (props) {\n//         super(props);\n//         const {dataPassed} = this.props;\n//         this.state = {\n//                 ...initialState,\n//                 rows: dataPassed\n//         };\n//     }\n//     componentDidMount () {\n//         console.log(\"Component Did Mount\");\n//         const { dataPassed } = this.props;\n//         console.log(`component will moutn has this array being passed to it ${dataPassed}`);\n//         this.setState({\n//             rows: dataPassed\n//         })\n//     }\n//     handleChangePage = (event, page) => {\n//         this.setState({ page });\n//     };\n//     handleChangeRowsPerPage = event => {\n//         this.setState({ page: 0, rowsPerPage: event.target.value });\n//     };\n//     render() {\n//         const { classes, columns, sortDirection, columnToSort } = this.props;\n//         const rows = this.props.dataPassed;\n//         const { rowsPerPage, page } = this.state;\n//         const emptyRows = rowsPerPage - Math.min(rowsPerPage, (rows != null ? rows.length : 0) - page * rowsPerPage);\n//         console.log(\"This is the props \" + sortDirection + \" \" + columnToSort);\n//         return (\n//             <Paper className={classes.root}>\n//                 <div className={classes.tableWrapper}>\n//                     <Table className={classes.table}>\n//                                      <TableHead>\n//                                        <TableRow>\n//                                            <TableCell padding=\"checkbox\">\n//                                                <Checkbox />\n//                                            </TableCell>\n//                                            {columns.map((col) => (\n//                                                <TableCell align=\"left\">\n//                                                    <div onClick={() => this.props.handleSort(col.prop)}><span>{col.name} {columnToSort === col.prop ? (sortDirection === \"asc\" ? <UpArrow/> : <DownArrow/>) : null} </span></div>\n//                                                </TableCell>\n//                                            ))}\n//                                         </TableRow>\n//                                        </TableHead>\n//                         <TableBody>\n//                             {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => (\n//                                 <TableRow key={row.id}>\n//\n//                                     {columns.map((col) => (\n//                                         <TableCell component=\"th\" scope=\"row\" align=\"left\">\n//                                             {row[col.prop]}\n//                                         </TableCell>\n//                                     ))}\n//                                 </TableRow>\n//                             ))}\n//                             {emptyRows > 0 && (\n//                                 <TableRow style={{ height: 48 * emptyRows }}>\n//                                     <TableCell colSpan={6} />\n//                                 </TableRow>\n//                             )}\n//                         </TableBody>\n//                         <TableFooter>\n//                             <TableRow>\n//                                 <TablePagination\n//                                     rowsPerPageOptions={[5, 10, 25]}\n//                                     colSpan={3}\n//                                     count={rows.length}\n//                                     rowsPerPage={rowsPerPage}\n//                                     page={page}\n//                                     SelectProps={{\n//                                         native: true,\n//                                     }}\n//                                     onChangePage={this.handleChangePage}\n//                                     onChangeRowsPerPage={this.handleChangeRowsPerPage}\n//                                     ActionsComponent={TablePaginationActionsWrapped}\n//                                 />\n//                             </TableRow>\n//                         </TableFooter>\n//                     </Table>\n//                 </div>\n//             </Paper>\n//         );\n//     }\n// }\n// SimpleTable.propTypes = {\n//     classes: PropTypes.object.isRequired,\n// };\n//\n// export default withStyles(styles)(SimpleTable);","map":{"version":3,"sources":["C:\\Users\\avidal\\Documents\\WebApps\\clientDashboard\\ClientDashBoard\\client\\src\\components\\SimpleTable\\simpleTable.js"],"names":["React","PropTypes","withStyles","Table","TableBody","TableCell","TableHead","TableRow","Paper","TablePagination","Checkbox","Tooltip","TableSortLabel","Typography","Toolbar","classNames","lighten","orderBy","TextField","EnhancedTableHead","props","onSelectAllClick","order","numSelected","rowCount","cols","console","log","id","map","numeric","disablePadding","event","handleSort1","label","query","e","handleQueryChange","Component","propTypes","number","isRequired","onRequestSort","func","string","toolbarStyles","theme","root","paddingRight","spacing","unit","highlight","palette","type","color","secondary","main","backgroundColor","light","text","primary","dark","spacer","flex","actions","title","EnhancedTableToolbar","classes","object","styles","width","marginTop","table","minWidth","tableWrapper","overflowX","initialState","selected","page","rowsPerPage","columnToSort","sortDirection","columnToQuery","EnhancedTable","state","handleSort","columnName","setState","handleQueryChange1","target","name","value","handleSelectAllClick","handleSelAll","checked","rows","handleClick","handleSelected","handleChangePage","handleChangeRowsPerPage","isSelected","indexOf","dataPassed","columns","tableTitle","emptyRows","Math","min","length","formQuery","toLowerCase","filter","x","includes","slice","row","col","toString","replace","height"],"mappings":"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":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport classNames from 'classnames';\r\nimport { lighten } from '@material-ui/core/styles/colorManipulator';\r\nimport orderBy from 'lodash/orderBy';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nclass EnhancedTableHead extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render() {\r\n        const { onSelectAllClick, order, orderBy, numSelected, rowCount, cols } = this.props;\r\n        console.log(\"Enhanced header, Order: \" + order + \". OrderBy: \" + orderBy);\r\n        console.log(\"Enhanced header, cols props \" + cols[0].id);\r\n        return (\r\n            <TableHead>\r\n                <TableRow>\r\n                    <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                            checked={numSelected === rowCount}\r\n                            onChange={onSelectAllClick}\r\n                        />\r\n                    </TableCell>\r\n                    {cols.map(\r\n                        cols => (\r\n                            <TableCell\r\n                                key={cols.id}\r\n                                align={cols.numeric ? 'right' : 'left'}\r\n                                display='flex'\r\n                                padding={cols.disablePadding ? 'none' : 'default'}\r\n                                sortDirection={orderBy === cols.id ? order : false}\r\n                            >\r\n                                <div display='block'>\r\n                                <Tooltip\r\n                                    title=\"Sort\"\r\n                                    placement={cols.numeric ? 'bottom-end' : 'bottom-start'}\r\n                                    enterDelay={300}\r\n                                >\r\n                                    <TableSortLabel\r\n                                        active={orderBy === cols.id}\r\n                                        direction={order}\r\n                                        onClick={(event) => this.props.handleSort1(event, cols.id)}\r\n                                    >\r\n                                        {cols.label}\r\n                                    </TableSortLabel>\r\n                                </Tooltip>\r\n                                </div>\r\n                                <div display='block'>\r\n                                <TextField\r\n                                    name={cols.id}\r\n                                    hintText=\"Query\"\r\n                                    floatingLabelText=\"Query\"\r\n                                    value={this.props.query}\r\n                                    onChange={(e) => this.props.handleQueryChange(e)}\r\n\r\n                                />\r\n                                </div>\r\n                            </TableCell>\r\n                        ),\r\n                        this,\r\n                    )}\r\n                </TableRow>\r\n            </TableHead>\r\n        );\r\n    }\r\n}\r\nEnhancedTableHead.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n    onRequestSort: PropTypes.func.isRequired,\r\n    onSelectAllClick: PropTypes.func.isRequired,\r\n    order: PropTypes.string.isRequired,\r\n    orderBy: PropTypes.string.isRequired,\r\n    rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst toolbarStyles = theme => ({\r\n    root: {\r\n        paddingRight: theme.spacing.unit,\r\n    },\r\n    highlight:\r\n        theme.palette.type === 'light'\r\n            ? {\r\n                color: theme.palette.secondary.main,\r\n                backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n            }\r\n            : {\r\n                color: theme.palette.text.primary,\r\n                backgroundColor: theme.palette.secondary.dark,\r\n            },\r\n    spacer: {\r\n        flex: '1 1 100%',\r\n    },\r\n    actions: {\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    title: {\r\n        flex: '0 0 auto',\r\n    },\r\n});\r\n\r\nlet EnhancedTableToolbar = props => {\r\n    const { numSelected, classes, title } = props;\r\n    return (\r\n        <Toolbar\r\n            className={classNames(classes.root, {\r\n                [classes.highlight]: numSelected > 0,\r\n            })}\r\n        >\r\n            <div className={classes.title}>\r\n                {numSelected > 0 ? (\r\n                    <Typography color=\"inherit\" variant=\"subtitle1\">\r\n                        {numSelected} selected\r\n                    </Typography>\r\n                ) : (\r\n                    <Typography variant=\"h6\" id=\"tableTitle\">\r\n                        {title}\r\n                    </Typography>\r\n                )}\r\n            </div>\r\n            <div className={classes.spacer} />\r\n            <div className={classes.actions}>\r\n            </div>\r\n        </Toolbar>\r\n    );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nEnhancedTableToolbar = withStyles(toolbarStyles)(EnhancedTableToolbar);\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        marginTop: theme.spacing.unit * 3,\r\n        color: \"green\"\r\n    },\r\n    table: {\r\n        minWidth: 1020,\r\n        color: 'green',\r\n    },\r\n    tableWrapper: {\r\n        overflowX: 'auto',\r\n    },\r\n});\r\nconst initialState = {\r\n        selected: [],\r\n        page: 0,\r\n        rowsPerPage: 5,\r\n        columnToSort: '',\r\n        sortDirection: 'desc',\r\n        query: '',\r\n        columnToQuery: '',\r\n\r\n};\r\nclass EnhancedTable extends React.Component {\r\n    state = initialState;\r\n    constructor (props) {\r\n        super(props);\r\n        const {dataPassed, selected} = this.props;\r\n        this.state = {\r\n             ...initialState,\r\n            rows: dataPassed,\r\n            selected: selected\r\n        };\r\n    };\r\n    handleSort = (event, columnName) => {\r\n        console.log(\"sort event object: \");\r\n        console.log(\"Sort data is being hit Column Name:\", columnName);\r\n        this.setState({\r\n            columnToSort: columnName,\r\n            sortDirection: this.state.columnToSort === columnName ? (this.state.sortDirection === 'desc' ? 'asc' : 'desc') : 'asc'\r\n        });\r\n        console.log(\"State of the state after the update in the sort data function \", this.state);\r\n    };\r\n\r\n    handleQueryChange1 = (event) => {\r\n        this.setState({\r\n            columnToQuery: event.target.name,\r\n            query: event.target.value\r\n        })\r\n    };\r\n\r\n    componentDidMount () {\r\n        console.log(\"Component Did Mount\");\r\n        const { dataPassed } = this.props;\r\n        console.log(`component will moutn has this array being passed to it ${dataPassed}`);\r\n        this.setState({\r\n            rows: dataPassed\r\n        })\r\n    };\r\n\r\n    handleSelectAllClick = event => {\r\n        this.props.handleSelAll(event.target.checked, this.state.rows);\r\n    };\r\n\r\n    handleClick = (event, id) => {\r\n        this.props.handleSelected(id);\r\n    };\r\n\r\n    handleChangePage = (event, page) => {\r\n        this.setState({ page });\r\n    };\r\n\r\n    handleChangeRowsPerPage = event => {\r\n        this.setState({ rowsPerPage: event.target.value });\r\n    };\r\n\r\n    isSelected = id => this.props.selected.indexOf(id) !== -1;\r\n\r\n    render() {\r\n        const { classes, columns, tableTitle, selected} = this.props;\r\n        const rows = this.props.dataPassed;\r\n        const { sortDirection, columnToSort, rowsPerPage, page } = this.state;\r\n        const emptyRows = rowsPerPage - Math.min(rowsPerPage, (rows != null ? rows.length : 0) - page * rowsPerPage);\r\n        const formQuery = this.state.query.toLowerCase();\r\n        console.log(\"data being passed to table\", this.state.columnToSort);\r\n        console.log(\"data being passed to table, columns\", columns);\r\n        console.log(\"State in the table, \", this.state);\r\n\r\n        return (\r\n            <Paper className={classes.root}>\r\n                <EnhancedTableToolbar numSelected={selected.length} title={tableTitle} />\r\n                <div className={classes.tableWrapper}>\r\n                    <Table className={classes.table} aria-labelledby={tableTitle}>\r\n                        <EnhancedTableHead\r\n                            numSelected={selected.length}\r\n                            order={sortDirection}\r\n                            orderBy={columnToSort}\r\n                            onSelectAllClick={this.handleSelectAllClick}\r\n                            rowCount={rows.length}\r\n                            cols={columns}\r\n                            handleSort1={this.handleSort}\r\n                            handleQueryChange={this.handleQueryChange1}\r\n                        />\r\n                        <TableBody>\r\n\r\n                            {orderBy(this.state.query ? rows.filter(x => x[this.state.columnToQuery].toLowerCase().includes(formQuery)) : rows, this.state.columnToSort, this.state.sortDirection).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => (\r\n                                <TableRow\r\n                                    key={row.id}\r\n                                    hover\r\n                                    onClick={event => this.handleClick(event, row.id)}\r\n                                    role=\"checkbox\"\r\n                                    tabIndex={-1}\r\n                                    selected={this.isSelected(row.id)}\r\n                                >\r\n                                    <TableCell padding=\"checkbox\">\r\n                                        <Checkbox checked={this.isSelected(row.id)} />\r\n                                    </TableCell>\r\n                                    {columns.map((col) => (\r\n                                        <TableCell component=\"th\" scope=\"row\" align={col.numeric ? \"right\" : \"left\"}>\r\n                                            {col.numeric ? row[col.id].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") : row[col.id]}\r\n                                        </TableCell>\r\n                                    ))}\r\n                                </TableRow>\r\n                            ))}\r\n                            {emptyRows > 0 && (\r\n                                <TableRow style={{ height: 48 * emptyRows }}>\r\n                                    <TableCell colSpan={6} />\r\n                                </TableRow>\r\n                            )}\r\n                        </TableBody>\r\n                    </Table>\r\n                </div>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component=\"div\"\r\n                    count={rows.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    backIconButtonProps={{\r\n                        'aria-label': 'Previous Page',\r\n                    }}\r\n                    nextIconButtonProps={{\r\n                        'aria-label': 'Next Page',\r\n                    }}\r\n                    onChangePage={this.handleChangePage}\r\n                    onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n        );\r\n    }\r\n}\r\n\r\nEnhancedTable.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(EnhancedTable);\r\n\r\n// const actionsStyles = theme => ({\r\n//     root: {\r\n//         flexShrink: 0,\r\n//         color: theme.palette.text.secondary,\r\n//         marginLeft: theme.spacing.unit * 2.5,\r\n//     },\r\n// });\r\n//\r\n// class TablePaginationActions extends React.Component {\r\n//     handleFirstPageButtonClick = event => {\r\n//         this.props.onChangePage(event, 0);\r\n//     };\r\n//\r\n//     handleBackButtonClick = event => {\r\n//         this.props.onChangePage(event, this.props.page - 1);\r\n//     };\r\n//\r\n//     handleNextButtonClick = event => {\r\n//         this.props.onChangePage(event, this.props.page + 1);\r\n//     };\r\n//\r\n//     handleLastPageButtonClick = event => {\r\n//         this.props.onChangePage(\r\n//             event,\r\n//             Math.max(0, Math.ceil(this.props.count / this.props.rowsPerPage) - 1),\r\n//         );\r\n//     };\r\n//\r\n//     render() {\r\n//         const { classes, count, page, rowsPerPage, theme } = this.props;\r\n//\r\n//         return (\r\n//             <div className={classes.root}>\r\n//                 <IconButton\r\n//                     onClick={this.handleFirstPageButtonClick}\r\n//                     disabled={page === 0}\r\n//                     aria-label=\"First Page\"\r\n//                 >\r\n//                     {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n//                 </IconButton>\r\n//                 <IconButton\r\n//                     onClick={this.handleBackButtonClick}\r\n//                     disabled={page === 0}\r\n//                     aria-label=\"Previous Page\"\r\n//                 >\r\n//                     {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n//                 </IconButton>\r\n//                 <IconButton\r\n//                     onClick={this.handleNextButtonClick}\r\n//                     disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n//                     aria-label=\"Next Page\"\r\n//                 >\r\n//                     {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n//                 </IconButton>\r\n//                 <IconButton\r\n//                     onClick={this.handleLastPageButtonClick}\r\n//                     disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n//                     aria-label=\"Last Page\"\r\n//                 >\r\n//                     {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n//                 </IconButton>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n//\r\n// TablePaginationActions.propTypes = {\r\n//     classes: PropTypes.object.isRequired,\r\n//     count: PropTypes.number.isRequired,\r\n//     onChangePage: PropTypes.func.isRequired,\r\n//     page: PropTypes.number.isRequired,\r\n//     rowsPerPage: PropTypes.number.isRequired,\r\n//     theme: PropTypes.object.isRequired,\r\n// };\r\n//\r\n// const TablePaginationActionsWrapped = withStyles(actionsStyles, { withTheme: true })(\r\n//     TablePaginationActions,\r\n// );\r\n//\r\n// const styles = theme => ({\r\n//     root: {\r\n//         width: 'auto',\r\n//         marginTop: theme.spacing.unit * 3,\r\n//     },\r\n//     table: {\r\n//         minWidth: 500,\r\n//     },\r\n//     tableWrapper: {\r\n//         overflowX: 'auto',\r\n//     },\r\n// });\r\n//\r\n// const initialState = {\r\n//     rows: [],\r\n//     page: 0,\r\n//     rowsPerPage: 5,\r\n// };\r\n//\r\n// class SimpleTable extends React.Component {\r\n//     constructor (props) {\r\n//         super(props);\r\n//         const {dataPassed} = this.props;\r\n//         this.state = {\r\n//                 ...initialState,\r\n//                 rows: dataPassed\r\n//         };\r\n//     }\r\n//     componentDidMount () {\r\n//         console.log(\"Component Did Mount\");\r\n//         const { dataPassed } = this.props;\r\n//         console.log(`component will moutn has this array being passed to it ${dataPassed}`);\r\n//         this.setState({\r\n//             rows: dataPassed\r\n//         })\r\n//     }\r\n//     handleChangePage = (event, page) => {\r\n//         this.setState({ page });\r\n//     };\r\n//     handleChangeRowsPerPage = event => {\r\n//         this.setState({ page: 0, rowsPerPage: event.target.value });\r\n//     };\r\n//     render() {\r\n//         const { classes, columns, sortDirection, columnToSort } = this.props;\r\n//         const rows = this.props.dataPassed;\r\n//         const { rowsPerPage, page } = this.state;\r\n//         const emptyRows = rowsPerPage - Math.min(rowsPerPage, (rows != null ? rows.length : 0) - page * rowsPerPage);\r\n//         console.log(\"This is the props \" + sortDirection + \" \" + columnToSort);\r\n//         return (\r\n//             <Paper className={classes.root}>\r\n//                 <div className={classes.tableWrapper}>\r\n//                     <Table className={classes.table}>\r\n//                                      <TableHead>\r\n//                                        <TableRow>\r\n//                                            <TableCell padding=\"checkbox\">\r\n//                                                <Checkbox />\r\n//                                            </TableCell>\r\n//                                            {columns.map((col) => (\r\n//                                                <TableCell align=\"left\">\r\n//                                                    <div onClick={() => this.props.handleSort(col.prop)}><span>{col.name} {columnToSort === col.prop ? (sortDirection === \"asc\" ? <UpArrow/> : <DownArrow/>) : null} </span></div>\r\n//                                                </TableCell>\r\n//                                            ))}\r\n//                                         </TableRow>\r\n//                                        </TableHead>\r\n//                         <TableBody>\r\n//                             {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => (\r\n//                                 <TableRow key={row.id}>\r\n//\r\n//                                     {columns.map((col) => (\r\n//                                         <TableCell component=\"th\" scope=\"row\" align=\"left\">\r\n//                                             {row[col.prop]}\r\n//                                         </TableCell>\r\n//                                     ))}\r\n//                                 </TableRow>\r\n//                             ))}\r\n//                             {emptyRows > 0 && (\r\n//                                 <TableRow style={{ height: 48 * emptyRows }}>\r\n//                                     <TableCell colSpan={6} />\r\n//                                 </TableRow>\r\n//                             )}\r\n//                         </TableBody>\r\n//                         <TableFooter>\r\n//                             <TableRow>\r\n//                                 <TablePagination\r\n//                                     rowsPerPageOptions={[5, 10, 25]}\r\n//                                     colSpan={3}\r\n//                                     count={rows.length}\r\n//                                     rowsPerPage={rowsPerPage}\r\n//                                     page={page}\r\n//                                     SelectProps={{\r\n//                                         native: true,\r\n//                                     }}\r\n//                                     onChangePage={this.handleChangePage}\r\n//                                     onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n//                                     ActionsComponent={TablePaginationActionsWrapped}\r\n//                                 />\r\n//                             </TableRow>\r\n//                         </TableFooter>\r\n//                     </Table>\r\n//                 </div>\r\n//             </Paper>\r\n//         );\r\n//     }\r\n// }\r\n// SimpleTable.propTypes = {\r\n//     classes: PropTypes.object.isRequired,\r\n// };\r\n//\r\n// export default withStyles(styles)(SimpleTable);"]},"metadata":{},"sourceType":"module"}