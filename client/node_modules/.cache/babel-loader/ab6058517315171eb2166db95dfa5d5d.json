{"ast":null,"code":"var CHAR_SET = [{\n  '100010100': '0'\n}, {\n  '101001000': '1'\n}, {\n  '101000100': '2'\n}, {\n  '101000010': '3'\n}, {\n  '100101000': '4'\n}, {\n  '100100100': '5'\n}, {\n  '100100010': '6'\n}, {\n  '101010000': '7'\n}, {\n  '100010010': '8'\n}, {\n  '100001010': '9'\n}, {\n  '110101000': 'A'\n}, {\n  '110100100': 'B'\n}, {\n  '110100010': 'C'\n}, {\n  '110010100': 'D'\n}, {\n  '110010010': 'E'\n}, {\n  '110001010': 'F'\n}, {\n  '101101000': 'G'\n}, {\n  '101100100': 'H'\n}, {\n  '101100010': 'I'\n}, {\n  '100110100': 'J'\n}, {\n  '100011010': 'K'\n}, {\n  '101011000': 'L'\n}, {\n  '101001100': 'M'\n}, {\n  '101000110': 'N'\n}, {\n  '100101100': 'O'\n}, {\n  '100010110': 'P'\n}, {\n  '110110100': 'Q'\n}, {\n  '110110010': 'R'\n}, {\n  '110101100': 'S'\n}, {\n  '110100110': 'T'\n}, {\n  '110010110': 'U'\n}, {\n  '110011010': 'V'\n}, {\n  '101101100': 'W'\n}, {\n  '101100110': 'X'\n}, {\n  '100110110': 'Y'\n}, {\n  '100111010': 'Z'\n}, {\n  '100101110': '-'\n}, {\n  '111010100': '.'\n}, {\n  '111010010': ' '\n}, {\n  '111001010': '$'\n}, {\n  '101101110': '/'\n}, {\n  '101110110': '+'\n}, {\n  '110101110': '%'\n}, {\n  '100100110': '($)'\n}, {\n  '111011010': '(%)'\n}, {\n  '111010110': '(/)'\n}, {\n  '100110010': '(+)'\n}, {\n  '101011110': '*'\n}];\n\nmodule.exports = function (lines) {\n  var code = [];\n  var binary = []; // remove termination bar\n\n  lines.pop();\n  var barThreshold = Math.ceil(lines.reduce(function (pre, item) {\n    return pre + item;\n  }, 0) / lines.length);\n  var minBarWidth = Math.ceil(lines.reduce(function (pre, item) {\n    if (item < barThreshold) return (pre + item) / 2;\n    return pre;\n  }, 0)); // leave the padded *\n\n  for (var i = 0; i < lines.length; i += 1) {\n    var segment = lines[i];\n\n    while (segment > 0) {\n      if (i % 2 === 0) {\n        binary.push(1);\n      } else {\n        binary.push(0);\n      }\n\n      segment -= minBarWidth;\n    }\n  }\n\n  var _loop = function _loop(_i) {\n    var searcKey = binary.slice(_i, _i + 9).join('');\n    var char = CHAR_SET.filter(function (item) {\n      return Object.keys(item)[0] === searcKey;\n    });\n    code.push(char[0][searcKey]);\n  };\n\n  for (var _i = 0; _i < binary.length; _i += 9) {\n    _loop(_i);\n  }\n\n  if (code.shift() !== '*' || code.pop() !== '*') return null;\n  var K = code.pop();\n  var sum = 0;\n\n  var letter,\n      Value,\n      findValue = function findValue(item) {\n    return Object.values(item)[0] === letter;\n  };\n\n  for (var _i2 = code.length - 1; _i2 >= 0; _i2 -= 1) {\n    letter = code[_i2];\n    Value = CHAR_SET.indexOf(CHAR_SET.filter(findValue)[0]);\n    sum += Value * (1 + (code.length - (_i2 + 1)) % 20);\n  }\n\n  if (Object.values(CHAR_SET[sum % 47])[0] !== K) return null;\n  var C = code.pop();\n  sum = 0;\n\n  for (var _i3 = code.length - 1; _i3 >= 0; _i3 -= 1) {\n    letter = code[_i3];\n    Value = CHAR_SET.indexOf(CHAR_SET.filter(findValue)[0]);\n    sum += Value * (1 + (code.length - (_i3 + 1)) % 20);\n  }\n\n  if (Object.values(CHAR_SET[sum % 47])[0] !== C) return null;\n  return code.join('');\n};","map":null,"metadata":{},"sourceType":"script"}