{"ast":null,"code":"var _regeneratorRuntime = require(\"C:\\\\Users\\\\avidal\\\\Documents\\\\WebApps\\\\clientDashboard\\\\ClientDashBoard\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\avidal\\\\Documents\\\\WebApps\\\\clientDashboard\\\\ClientDashBoard\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar Jimp = require('jimp');\n\nvar isNode = typeof process === 'object' && process.release && process.release.name === 'node'; // check if string is url\n\nfunction isUrl(s) {\n  var regexp = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-/]))?/;\n  return !s[0] === '#' || regexp.test(s);\n}\n/**\r\n * Creates image data from HTML image\r\n * @param {HTMLImageElement} image HTML Image element\r\n */\n\n\nfunction createImageData(image) {\n  var canvas = document.createElement('canvas');\n  var ctx = canvas.getContext('2d');\n  var width = image.naturalWidth;\n  var height = image.naturalHeight;\n  canvas.width = width;\n  canvas.height = height;\n  ctx.drawImage(image, 0, 0);\n  return ctx.getImageData(0, 0, image.naturalWidth, image.naturalHeight);\n}\n/**\r\n * Reads image source and returns imageData as only callback parameter\r\n * @param {*} source Image source\r\n * @param {Function} callback Callback to pass the imageData\r\n */\n\n\nfunction getImageDataFromSource(_x) {\n  return _getImageDataFromSource.apply(this, arguments);\n}\n\nfunction _getImageDataFromSource() {\n  _getImageDataFromSource = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(source) {\n    var isStringSource, isURLSource, tagName;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            isStringSource = typeof source === 'string';\n            isURLSource = isStringSource ? isUrl(source) : false;\n            tagName = source.tagName;\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              // String source\n              if (isStringSource) {\n                // Read file in Node.js\n                if (isNode) {\n                  Jimp.read(isURLSource ? {\n                    url: source,\n                    headers: {}\n                  } : source, function (err, image) {\n                    if (err) {\n                      reject(err);\n                    } else {\n                      var _image$bitmap = image.bitmap,\n                          data = _image$bitmap.data,\n                          width = _image$bitmap.width,\n                          height = _image$bitmap.height;\n                      resolve({\n                        data: data.toJSON().data,\n                        width: width,\n                        height: height\n                      });\n                    }\n                  });\n                } else if (isURLSource) {\n                  // Load Image from source\n                  var img = new Image();\n                  img.onerror = reject;\n\n                  img.onload = function () {\n                    return resolve(createImageData(img));\n                  };\n\n                  img.src = source;\n                } else {\n                  // Find Elment by ID\n                  var imgElem = document.getElementById(source);\n\n                  if (imgElem) {\n                    resolve(createImageData(imgElem));\n                  }\n\n                  reject(new Error('Invalid image source specified!'));\n                }\n              } else if (tagName) {\n                // HTML Image element\n                if (tagName === 'IMG') {\n                  resolve(createImageData(source));\n                } // HTML Canvas element\n                else if (tagName === 'CANVAS') {\n                    resolve(source.getContext('2d').getImageData(0, 0, source.naturalWidth, source.naturalHeight));\n                  }\n\n                reject(new Error('Invalid image source specified!'));\n              } // Pixel Data\n              else if (source.data && source.width && source.height) {\n                  resolve(source);\n                } else {\n                  reject(new Error('Invalid image source specified!'));\n                }\n            }));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getImageDataFromSource.apply(this, arguments);\n}\n\nmodule.exports = {\n  getImageDataFromSource: getImageDataFromSource\n};","map":null,"metadata":{},"sourceType":"script"}