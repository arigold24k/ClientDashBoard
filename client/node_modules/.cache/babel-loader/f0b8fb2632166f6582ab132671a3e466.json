{"ast":null,"code":"var bcrypt = require('bcrypt-nodejs');\n\nvar saltRounds = 12;\nvar salt = bcrypt.genSaltSync(saltRounds);\nvar func_ = {\n  encryptPW: function encryptPW(password) {\n    console.log('This is the data being passed to the encryp function, password ', password);\n    var hash = bcrypt.hashSync(password, salt); // bcrypt.hash(password, saltRounds).then(function(hash) {\n    //\n    //     if(hash) {\n    //         cb(null, hash);\n    //         console.log('This is the hash ', err);\n    //     }\n    //     cb(hash, null);\n    //     console.log('This is the hash ', data);\n    // });\n\n    if (hash) {\n      return hash;\n    } else {\n      return 0;\n    }\n  },\n  checkPW: function checkPW(passwordEnt, passwordIS) {\n    var compareVal = bcrypt.compareSync(passwordEnt, passwordIS);\n\n    if (compareVal) {\n      return compareVal;\n    }\n\n    return 0;\n  }\n};\nmodule.exports = func_;","map":{"version":3,"sources":["C:\\Users\\avidal\\Documents\\WebApps\\project2\\client\\src\\functions\\functions.js"],"names":["bcrypt","require","saltRounds","salt","genSaltSync","func_","encryptPW","password","console","log","hash","hashSync","checkPW","passwordEnt","passwordIS","compareVal","compareSync","module","exports"],"mappings":"AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,eAAD,CAAtB;;AACA,IAAMC,UAAU,GAAG,EAAnB;AACA,IAAMC,IAAI,GAAGH,MAAM,CAACI,WAAP,CAAmBF,UAAnB,CAAb;AAEA,IAAMG,KAAK,GAAG;AACVC,EAAAA,SAAS,EAAE,mBAASC,QAAT,EAAmB;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAY,iEAAZ,EAA+EF,QAA/E;AACA,QAAIG,IAAI,GAAGV,MAAM,CAACW,QAAP,CAAgBJ,QAAhB,EAA0BJ,IAA1B,CAAX,CAF0B,CAG1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAIO,IAAJ,EAAU;AACN,aAAOA,IAAP;AACH,KAFD,MAEK;AACD,aAAO,CAAP;AACH;AACJ,GAlBS;AAmBVE,EAAAA,OAAO,EAAC,iBAASC,WAAT,EAAsBC,UAAtB,EAAkC;AACtC,QAAMC,UAAU,GAAGf,MAAM,CAACgB,WAAP,CAAmBH,WAAnB,EAAgCC,UAAhC,CAAnB;;AACA,QAAGC,UAAH,EAAe;AACX,aAAOA,UAAP;AACH;;AAAA,WAAO,CAAP;AAEJ;AAzBS,CAAd;AA6BAE,MAAM,CAACC,OAAP,GAAiBb,KAAjB","sourcesContent":["const bcrypt = require('bcrypt-nodejs');\r\nconst saltRounds = 12;\r\nconst salt = bcrypt.genSaltSync(saltRounds);\r\n\r\nconst func_ = {\r\n    encryptPW: function(password) {\r\n        console.log('This is the data being passed to the encryp function, password ', password);\r\n        let hash = bcrypt.hashSync(password, salt);\r\n        // bcrypt.hash(password, saltRounds).then(function(hash) {\r\n        //\r\n        //     if(hash) {\r\n        //         cb(null, hash);\r\n        //         console.log('This is the hash ', err);\r\n        //     }\r\n        //     cb(hash, null);\r\n        //     console.log('This is the hash ', data);\r\n        // });\r\n        if (hash) {\r\n            return hash;\r\n        }else{\r\n            return 0\r\n        }\r\n    },\r\n    checkPW:function(passwordEnt, passwordIS) {\r\n        const compareVal = bcrypt.compareSync(passwordEnt, passwordIS);\r\n        if(compareVal) {\r\n            return compareVal\r\n        }return 0\r\n\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = func_;\r\n\r\n"]},"metadata":{},"sourceType":"module"}